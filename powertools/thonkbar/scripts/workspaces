#!/bin/python3
"""block to display i3 workspaces on thonkbar"""
from os import getlogin
from sys import stdout

from i3ipc import Connection, Event # type: ignore

from watchdog.events import FileSystemEventHandler
from watchdog.observers import Observer

COLORSCHEME_FILE = f"/tmp/{getlogin()}/wall_colors"

I3WM = Connection()

class ColorschemeHandler(FileSystemEventHandler):
    """ Class for managing and updating the colorsheme """
    urgent: str = "#E6f22c40"
    focused: str = "#E6407ee7"
    default: str = "#E6a8a19f"
    observer = Observer()
    observing: bool = False

    def __init__(self):
        self.monitor()
        self.update_colorscheme()

    def monitor(self):
        """ monitor colorscheme file for changes """
        if not self.observing:
            try:
                self.observer.schedule(self, COLORSCHEME_FILE)
                self.observer.start()
                self.observing = True
            except OSError as _:
                self.observing = False


    def update_colorscheme(self):
        """ update colorsheme from file generated by wall """
        try:
            with open(COLORSCHEME_FILE, "r", encoding="utf-8") as file:
                colors = file.readline().split()
                if len(colors) == 2:
                    self.focused = colors[0]
                    print_workspaces(self)
        except OSError as _:
            return

    def on_modified(self, _):
        """ update when file is modified """
        self.update_colorscheme()

    def on_created(self, _):
        """ update when file is created """
        self.update_colorscheme()


def print_workspaces(color):
    """print workspaces in lemonbar format"""

    color.monitor()

    workspaces = [None] * 10

    for workspace in I3WM.get_workspaces():
        try:
            name_int = (int(workspace.name)) - 1
            if workspace.urgent:
                workspaces[name_int] = f'%{{F{color.urgent}}}'
            elif workspace.focused:
                workspaces[name_int] = f'%{{F{color.focused}}}'
            else:
                workspaces[name_int] = f'%{{F{color.default}}}'
        except ValueError:
            print("re")

    while workspaces[-1] is None:
        workspaces.pop()

    workspaces = [x if x else f"%{{F{color.default}}}" for x in workspaces]

    print(*workspaces, "%{F-}")
    stdout.flush()


colorscheme = ColorschemeHandler()

def react_on_event(_, __):
    """function to handle events"""
    print_workspaces(colorscheme)

I3WM.on(Event.WORKSPACE_FOCUS, react_on_event)
I3WM.on(Event.WORKSPACE_URGENT, react_on_event)
I3WM.on(Event.WINDOW_MOVE, react_on_event)
I3WM.on(Event.WINDOW_NEW, react_on_event)
I3WM.on(Event.WINDOW_URGENT, react_on_event)

print_workspaces(colorscheme)

I3WM.main()
