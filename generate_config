#!/bin/python
"""templating language for dotfiles (made by [Mendess](https://github.com/mendess/spell-book))"""

import os
import re
from sys import argv
from typing import List, Optional, Tuple
from socket import gethostname

PERCENTS = re.compile(r'^%%', flags=re.M)
SWITCH_REGEX = re.compile(r'^(switch on ([A-Za-z]\w*))')
CASE_REGEX = re.compile(r'^(([^ {]+)\s*{[ \t]*)')
CASE_END_REGEX = re.compile(r'%%\s*}')
DEFAULT_REGEX = re.compile(r'^(default\s*{)')
SWITCH_END_REGEX = re.compile(r'^(\s*end[ \t]*)')
ENDLINE = re.compile(r'\s*\n')
IS_REGEX = re.compile(r'/([^/]*)/')

def hostname():
    """get hostname"""
    return gethostname().replace(".","-").strip()


class ParseError(Exception):
    def __init__(self, string, message='does not match'):
        super().__init__(f'String "{string[:20]}..." {message}')
        self.string = string

class Unit:
    pass

UNIT = Unit()

class Part:
    def write(self, _):
        raise NotImplementedError('Not overriden')

    def __str__(self):
        raise NotImplementedError('Not overriden')

class Text(Part):
    def __init__(self, text):
        self.text = text

    def write(self, stream):
        stream.write(self.text)

    def __str__(self):
        return f'Text {{ text: "{self.text}" }}'

class Switch:
    def __init__(self, case_on):
        self.case_on = case_on

    def __str__(self):
        return f'Switch {{ on: "{self.case_on}" }}'

class Case:
    def __init__(self, case, content):
        self.case = case
        self.content = content

    def __str__(self):
        return f'Case {{ case: "{self.case}", content: "{self.content}" }}'

class SwitchCase(Part):
    def __init__(self, switch: Switch, cases: List[Case], default: Optional[str] = None):
        self.switch = switch
        self.cases = cases
        self.default = default

    def write(self, stream):
        value = reflect_call(self.switch.case_on)
        for cases in self.cases:
            match = IS_REGEX.match(cases.case)
            if (match and re.match(match.group(1), value)) or value == cases.case:
                stream.write(cases.content)
                return
        if self.default:
            stream.write(self.default)

    def __str__(self):
        default = f'"{self.default}"' if self.default else "None"
        cases = ','.join(map(lambda x: x.__str__(), self.cases))
        return f'SwitchCase {{ switch: {self.switch}, cases: [{cases}], default: {default} }}'

def reflect_call(method_name: str) -> str:
    possibles = globals().copy()
    possibles.update(locals())
    method = possibles.get(method_name)
    if not method:
        raise NotImplementedError(f"Method {method_name} not implemented")
    return method()

def parse_whitespace(string: str) -> Tuple[Unit, str]:
    return (UNIT, string.lstrip())

def parse_endline(string: str) -> Tuple[Unit, str]:
    match = ENDLINE.search(string)

    if not match or match.start() != 0:
        raise ParseError(string, 'is not and end of line')

    return (UNIT, string[match.end():])

def parse_percents(original_string: str) -> Tuple[Unit, str]:
    if PERCENTS.match(original_string):
        return (UNIT, original_string[2:].lstrip())
    raise ParseError(original_string, 'does not start with %%')

def skip_up_to(token, string: str, match_len=[]) -> Tuple[str, str]:
    index = -1
    if isinstance(token, str):
        index = string.find(token)
        match_len.append(len(token))
    elif isinstance(token, re.Pattern):
        match = token.search(string)
        if match:
            index = match.start()
            match_len.append(match.end() - match.start())
        else:
            index = -1

    if index == -1:
        raise ParseError(string, f"doesn't contain {token}")

    return (string[:index], string[index:])

def skip_past(token, string: str) -> Tuple[str, str]:
    match_len = []
    (before, after) = skip_up_to(token, string, match_len)
    return (before, after[match_len[0]:])

def parse_switch(original_string: str) -> Tuple[Switch, str]:
    (_, string) = parse_percents(original_string)
    match = SWITCH_REGEX.match(string)
    if match:
        full = match.group(1)
        case_on = match.group(2)
        (_, string) = parse_endline(string[len(full):])
        return (Switch(case_on), string)
    raise ParseError(string, "is not a valid switch header")

def parse_case(original_string: str) -> Tuple[Case, str]:
    (_, string) = parse_percents(original_string)
    if DEFAULT_REGEX.match(string):
        raise ParseError(original_string, 'is a default case')
    match = CASE_REGEX.match(string)

    if not match:
        raise ParseError(original_string, "is not a valid case header")

    full = match.group(1)
    case = match.group(2)
    string = string[len(full):]
    (text, string) = skip_past(CASE_END_REGEX, string)
    (_, string) = parse_endline(string)
    return (Case(case, text), string)

def parse_cases(string: str) -> Tuple[List[Case], str]:
    cases = []
    try:
        while True:
            (case, string) = parse_case(string)
            cases += [case]
    except ParseError as _:
        return (cases, string)

def parse_default(original_string: str) -> Tuple[str, str]:
    try:
        (_, string) = parse_percents(original_string)
        match = DEFAULT_REGEX.match(string)
        if not match:
            raise ParseError(original_string)
        (default, string) = skip_past(CASE_END_REGEX, string[len(match.group(1)):])
        (_, string) = parse_endline(string)
        return (default, string)

    except ParseError as parse_error:
        return ("", parse_error.string)

def parse_end_switch(original_string: str) -> Tuple[Unit, str]:
    (_, string) = parse_percents(original_string)
    match = SWITCH_END_REGEX.match(string)

    if not match:
        raise ParseError(original_string, 'is expected to be the end of a switch')
    return (UNIT, string[len(match.group(1)):])

def parse_switch_case(string: str) -> Tuple[SwitchCase, str]:
    (switch, string) = parse_switch(string)
    (cases, string) = parse_cases(string)
    (default, string) = parse_default(string)
    (_, string) = parse_end_switch(string)
    return (SwitchCase(switch, cases, default), string)

def parse(string: str) -> List[Part]:
    parts = []
    while len(string) > 0:
        try:
            text, string = skip_up_to(PERCENTS, string)
            parts.append(Text(text))
        except:
            parts.append(Text(string))
            break

        try:
            switch_case, string = parse_switch_case(string)
            parts.append(switch_case)
        except ParseError as parse_error:
            if len(parse_error.string) != 0:
                raise parse_error

    return parts

def main():
    if len(argv) < 3:
        print(f'Usage: {os.path.basename(__file__)} template target')
    else:
        home=os.environ['HOME']
        print(f'{argv[1].replace(home,"~")} -> {argv[2].replace(home,"~")}')
        try:
            with open(argv[1], 'r', encoding="utf-8") as template:
                string = template.read()
                with open(argv[2], 'w', encoding="utf-8") as generated:
                    for parsed in parse(string):
                        parsed.write(generated)
        except Exception as exception:
            print(exception)

if __name__ == '__main__':
    main()
