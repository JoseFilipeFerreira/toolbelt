#!/bin/bash
# symlink dotfiles and scripts

[[ "$DOTFILES" ]] || DOTFILES="$(dirname "$(readlink -f "$0")")"

make_symlink(){
    if [ -h "$2" ] && [ ! -e "$2" ]; then
        case "$3" in
            sudo)
                echo -e "\033[31msudo link:\033[0m $(basename "$2")"
                sudo rm "$2"
                ;;
            *)
                echo -e "\033[31mlink:\033[0m $(basename "$2")"
                rm "$2"
                ;;
        esac
    fi
    if [ ! -h "$2" ]; then
        case "$3" in
            sudo)
                echo -en "\033[32msudo link:\033[0m "
                sudo ln -fvsn "$1" "$2" | sed "s|$HOME|~|g;s|'||g"
                ;;
            *)
                echo -en "\033[32mlink:\033[0m "
                ln -fvsn "$1" "$2" | sed "s|$HOME|~|g;s|'||g"
                ;;
        esac
    fi
}

make_makefile(){
    make --directory="$1" | grep -q "is up to date" && return
    out_install="$(make install --directory="$1" | grep -v "directory")"
    echo -e "\033[32mmake install:\033[0m $out_install"
}

make_install(){
    script="$1/install.sh"
    [[ -f "$script" ]] || return

    if ! bash "$script" check; then
        case "$2" in
            sudo)
                echo -e "\033[32msudo install:\033[0m $1" |
                    sed "s|$HOME|~|g"
                sudo bash "$script"
                ;;
            *)
                echo -e "\033[32minstall:\033[0m $1" |
                    sed "s|$HOME|~|g"
                bash "$script"
                ;;
        esac

    fi
}

make_generate(){
    if [ "$1" -nt "$2" ]; then
        case "$3" in
            sudo)
                echo -en "\033[32msudo generate:\033[0m "
                sudo python "$DOTFILES"/generate_config.py "$1" "$2" |
                    sed "s|$HOME|~|g;s|'||g"
                ;;
            *)
                echo -en "\033[32mgenerate:\033[0m "
                python "$DOTFILES"/generate_config.py "$1" "$2" |
                    sed "s|$HOME|~|g;s|'||g"
                ;;
        esac
    fi
}


deploy_dotfiles(){
    while IFS= read -r line; do
        IFS=',' read -ra linevec <<< "$line"
        attrs=("${linevec[@]:2}")

        [[ -n "$FILTERS" ]] &&
        [[ ! "$(comm -12 \
            <(printf '%s\n' "${FILTERS[@]}" | sort) \
            <(printf '%s\n' "${attrs[@]}" | sort))" \
        ]] &&
            continue

        orig="$DOTFILES/powertools/${linevec[0]}"
        dest="${linevec[1]//\~/$HOME}"

        mkdir -p "$(dirname "$dest")"

        unset mode
        for attr in "${attrs[@]}"; do
            case "$attr" in
                link)
                    make_symlink "$orig" "$dest" "$mode"
                    ;;
                make)
                    make_makefile "$orig"
                    ;;
                install)
                    make_install "$orig" "$mode"
                    ;;
                generate)
                    make_generate "$orig" "$dest" "$mode"
                    ;;
                sudo)
                    mode=sudo
                    ;;
            esac
        done
    done < "$DOTFILES/powertools/.locations"
}

store_tools(){
    orig="$1"
    dest="$2"
    mkdir -vp "$dest"

    # Remove Broken Links
    for tool in "$dest"/*; do
        if [ -h "$tool" ] && [ ! -e "$tool" ]; then
            echo -e "\033[31m$(basename "$tool")\033[0m"
            rm "$tool"
        fi
    done

    # Create Links
    for tool in "$orig"/*.tool; do
        tool_name=$(basename "$tool" .tool)
        if [ ! -h "$dest"/"$tool_name" ]; then
            echo -e "\033[32m$tool_name\033[0m"
            ln -s "$tool" "$dest/$tool_name"
        fi
    done
    chmod +x "$DOTFILES"/toolbox/*
}

config="$DOTFILES/.instalation_config"

touch "$config"
IFS=$'\n' read -d '' -r -a FILTERS < "$config"
FILTERS+=("$@")

printf "%s\n" "${FILTERS[@]}" | sort -u >| "$config"

[[ ${#FILTERS[@]} -eq 0 ]] &&
    echo "error: no filters were provided" &&
    echo "run hammer for initial setup" &&
    exit

store_tools "$DOTFILES"/toolbox ~/.local/bin
deploy_dotfiles

if [[ " ${FILTERS[*]} " =~ " mobile " ]]; then
    mkdir -p ~/.termux/tasker
    for tool in "$DOTFILES"/handtools/*.tool; do
        tool_name=$(basename "$tool" .tool)
        echo -e "\033[32m$tool_name\033[0m"
        cp "$tool" ~/.termux/tasker/"$tool_name"
    done
    bash "$DOTFILES"/schedule
fi
