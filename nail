#!/bin/bash
# symlink dotfiles and scripts

[[ ! "$DOTFILES" ]] && \
    DOTFILES="$(dirname "$(readlink -f "$0")")"

_make_symlink(){
    if [ -h "$2" ] && ! [ -e "$2" ]; then
        case "$3" in
            sudo)
                echo -e "\033[31msudo link:\033[0m $(basename "$2")"
                sudo rm "$2"
                ;;
            *)
                echo -e "\033[31mlink:\033[0m $(basename "$2")"
                rm "$2"
                ;;
        esac
    fi
    if [ ! -h "$2" ]; then
        case "$3" in
            sudo)
                echo -en "\033[32msudo link:\033[0m "
                sudo ln -fvsn "$1" "$2" | sed "s|$HOME|~|g;s|'||g"
                ;;
            *)
                echo -en "\033[32mlink:\033[0m "
                ln -fvsn "$1" "$2" | sed "s|$HOME|~|g;s|'||g"
                ;;
        esac
        echo -en "\033[0m"
    fi
}

_make_makefile(){
    make --directory="$1" | grep -q "is up to date" \
        && return

    out_install="$(make install --directory="$1" | grep -v "directory")"

    echo -e "\033[35mMake install:\033[33m $out_install \033[0m"
}

_make_generate(){
    if [ "$1" -nt "$2" ]; then
        case "$3" in
            sudo)
                echo -en "\033[32msudo generate:\033[0m "
                sudo python "$DOTFILES"/generate_config.py "$1" "$2" | sed "s|$HOME|~|g;s|'||g"
                ;;
            *)
                echo -en "\033[32mgenerate:\033[0m "
                python "$DOTFILES"/generate_config.py "$1" "$2" | sed "s|$HOME|~|g;s|'||g"
                ;;
        esac
    fi
}


_deploy_dotfiles(){
    while IFS= read -r l; do
        IFS=',' read -ra ARGS <<< "$l"
        ARGS=("${ARGS[@]:2}")

        if [ -n "$FILTERS" ]; then
            if [[ ! "$(comm -12 <(printf '%s\n' "${FILTERS[@]}" | sort) <(printf '%s\n' "${ARGS[@]}" | sort))" ]]; then
                continue
            fi
        fi

        orig="$DOTFILES/powertools/$(echo "$l" | cut -d, -f1)"
        dest=$(echo "$l" | cut -d, -f2 | sed "s|~|$HOME|g")
        mkdir -p "$(dirname "$dest")"


        if [[ " ${ARGS[*]} " =~ " sudo " ]]; then
            ARGS=("${ARGS[@]/sudo}")
            mode="sudo"
        else
            unset mode
        fi

        # delete empty ARGS fields
        for i in "${!ARGS[@]}"; do
            [[ "${ARGS[$i]}" ]] || unset 'ARGS[i]'
        done

        for ARG in "${ARGS[@]}"; do
            case "$ARG" in
                link)
                    _make_symlink "$orig" "$dest" "$mode"
                    ;;

                make)
                    _make_makefile "$orig" "$dest"
                    ;;

                generate)
                    _make_generate "$orig" "$dest" "$mode"
                    ;;
                *)
                    ;;
            esac
        done

    done < "$DOTFILES/powertools/.locations"
}

_storeTools(){
    mkdir -p ~/.local/bin

    # Remove Broken Links
    for tool in ~/.local/bin/*; do
        if [ ! -e "$tool" ]; then
            echo -e "\033[31m\t$(basename "$tool")\033[0m"
            rm "$tool"
        fi
    done

    # Create Links
    for tool in "$DOTFILES"/toolbox/*.tool; do
        tool_name=$(basename "$tool" .tool)
        if [ ! -h ~/.local/bin/"$tool_name" ]; then
            echo -e "\033[32m\t$tool_name\033[0m"
            ln -s "$tool" ~/.local/bin/"$tool_name"
        fi
    done
    chmod +x "$DOTFILES"/toolbox/*
}

touch "$DOTFILES/.instalation_config"
IFS=$'\n' read -d '' -r -a FILTERS < "$DOTFILES/.instalation_config"

while (( "$#" )); do
    case $1 in
        --*)
            FILTERS+=("${1:2}")
            shift
            ;;
        *)
            shift
            ;;
    esac
done

printf "%s\n" "${FILTERS[@]}" | sort -u > "$DOTFILES/.instalation_config"

_deploy_dotfiles
_storeTools
