#!/bin/bash
# Deploy dotfiles and install programs that are part of my [workflow](.workflow.csv)
set -e

[[ "$DOTFILES" ]] || DOTFILES="$(dirname "$(readlink -f "$0")")"

make_repos(){
    for repo in "$@"; do
        name="$(basename "$repo")"
        echo -e "\033[32mInstalling $name...\033[0m"
        git clone "$repo" /tmp/"$name"
        sudo make install -C /tmp/"$name"
        rm -rf /tmp/"$name"
    done
}

get_pkgs(){
    pkg_mngr="$1"
    while IFS=',' read -r l; do
        IFS=',' read -ra args <<< "$l"
        # shellcheck disable=SC2076
        [[ " ${args[*]} " =~ " $pkg_mngr " ]] &&
        {
            [[ ! "${*:2}" ]] ||
            [[ "$(comm -12 \
                <(printf '%s\n' "${@:2}" | sort) \
                <(printf '%s\n' "${args[@]}" | sort))" \
            ]] ;
        } &&
            echo "${args[2]}"
    done < "$DOTFILES/.workflow.csv"
}

install_pkgs(){
    if hash pacman &> /dev/null; then
        sudo pacman -Suyy

        readarray -t pkg_pacman < <(get_pkgs pacman "$@")
        sudo pacman -S --needed "${pkg_pacman[@]}"

        readarray -t pkg_repos < <(get_pkgs repos "$@")
        make_repos "${pkg_repos[@]}"

        readarray -t pkg_aura < <(get_pkgs aur "$@")
        aura -S "${pkg_aura[@]}"
    elif hash pkg &> /dev/null;then
        pkg update && pkg upgrade
        readarray -t pkg_pkg < <(get_pkgs pkg "$@")
        pkg install "${pkg_pkg[@]}"
    else
        echo "Package manager not suported"
    fi
}

setup_home(){
    echo -e "\033[32mCreating home structure...\033[0m"
    mkdir -vp "$HOME/dl"
    mkdir -vp "$HOME/docs"
    mkdir -vp "$HOME/media/pics"
    mkdir -vp "$HOME/media/videos"
    mkdir -vp "$HOME/repos"
}

read -r -p "Type of installation [(F)ULL | (e)ssential | (m)obile]: "
case "$REPLY" in
    FULL|F|"")
        install_pkgs
        bash "$DOTFILES"/nail essential extra
        setup_home
        ;;
    essential|e)
        install_pkgs essential
        bash "$DOTFILES"/nail essential
        setup_home
        ;;
    mobile|m)
        ! hash termux-setup-storage &> /dev/null &&
            echo "error: not in a termux env" && exit
        install_pkgs essential
        bash "$DOTFILES"/nail essential mobile
        [ -d ~/storage ] || termux-setup-storage
        termux-reload-settings
        ;;
    *)
        echo "Invalid type of installation"
        exit
        ;;
esac
